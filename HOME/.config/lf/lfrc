# --- Interpreter for shell commands
set shell sh

# --- Set '-eu' options for shell commands
#  These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
set shellopts '-eu'

# --- Set internal field separator (IFS) to "\n" for shell commands
#  This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. 
#  You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# --- Leave some space at the top and the bottom of the screen.
set scrolloff 10

# --- Define a custom 'open' command
#  This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# --- Vim-like quitting.
cmd q :q

# > Mounting
# --- Use `lsblk` to list partitions.
cmd lsblk !lsblk
# --- Mount a partition.
cmd mnt !udisksctl mount -b $1
# --- Unmount a partition.
cmd umnt !udisksctl unmount -b $1

# > File deletion/trashing
# >> Definitions
# --- Depends on `trash-cli`
# $fx is the current/selected file(s).
cmd trash $trash $fx
# --- Alternative trash command:
# cmd trash %set -f; mv $fx ~/.trash

# >> Usage
# --- Delete a file.
map - delete
# --- Use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# > Shell commands
# --- Use enter for shell commands.
map <enter> shell

# --- Execute current file (must be executable).
map x $$f
map X !$f

# --- Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# --- Extract the current file with the right command.
# (https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# --- Compress current file or selected files with tar and gunzip.
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# --- Compress current file or selected files with zip.
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}
